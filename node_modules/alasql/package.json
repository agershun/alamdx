{
  "name": "alasql",
  "description": "Alasql.js - pure JavaScript in-memory client-side fast SQL database",
  "version": "0.0.23",
  "author": {
    "name": "Andrey Gershun",
    "email": "agershun@gmail.com"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dependencies": {
    "es6-promise": "2.0.0"
  },
  "devDependencies": {
    "gulp-uglify": "^1.0.1"
  },
  "engines": [
    "node"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/agershun/alasql.git"
  },
  "bugs": {
    "url": "https://github.com/agershun/alasql/issues"
  },
  "homepage": "https://github.com/agershun/alasql",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "sql",
    "alasql",
    "mdx",
    "olap",
    "alasql",
    "parser",
    "stand-alone",
    "relational",
    "database",
    "RDBMS",
    "data",
    "query",
    "statement"
  ],
  "license": "MIT",
  "readme": "# Alasql.js - pure JavaScript client-side in-memory fast SQL-database \r\n\r\nVersion: 0.0.23 Date: November 22, 2014 [Change log](CHANGELOG.md), [Release plan](RELEASES.md)\r\n\r\nAlasql - '[Ã  la SQL](http://en.wiktionary.org/wiki/%C3%A0_la)' - is a lightweight client-side in-memory SQL database designed to work in browser and Node.js. \r\n\r\n* Alasql was written with pure JavaScript and does not use browser WebSQL database. \r\n* Alasql is fully functional compact SQL server with JOINs, GROUPs, UNIONs, PRIMARY KEYs, ANY, ALL, IN, subqueries and very limited transactions support.\r\n* Alasql supports ROLLUP(), CUBE() and GROUPING SETS() functions\r\n* Alasql works with all modern versions of browsers Chrome, Firefox, IE, Safari, Opera, Node.js, and mobile iOS and Android.\r\n* Alasql is fast, because it uses some optimization methods.\r\n\r\nCheck Alasql vs other JavaScript SQL databases: \r\n* [Alasql vs. WebSQL](http://jsperf.com/alasql-js-vs-websql)\r\n* [Alasql vs. SQL.js](http://jsperf.com/sql-js-vs-alasql-js/4)\r\n\r\n### Test Alasql in console\r\n* [SQL Console](http://alasql.org/console/alaconsole.html)\r\n* [Console source code](examples/console/alaconsole.html)\r\n\r\n### Warning \r\nAlasql project is very young and still in active development phase, therefore it may have some bugs. Please, wait a little bit before start to use it in production. I am going to add more tests and clean the code before relaese more stable version 0.1.0 in the mid of November. \r\nPlease, submit bugs and suggestions in [issue page]().\r\n\r\nSorry, transactions were temporary turned off in version 0.0.17, because we started to introduce more complex approach for PRIMARY KEYS / FOREIGN KEYS. I will turn transactions on again in one of the future version.\r\n\r\nYou can check [version-0.0.23](https://github.com/agershun/alasql/tree/version-0.0.23) branch for new experimental features of new version. \r\n\r\n### Documentation (draft)\r\n\r\nThe early prototype of documentation will be placed on [Alasql Wiki](https://github.com/agershun/alasql/wiki).\r\n\r\n## Examples\r\n\r\nTry Alasql in Fiddle: [sample 1](http://jsfiddle.net/38hj2uwy/10/), [sample 2](http://jsfiddle.net/38hj2uwy/6/), [sample 3](http://jsfiddle.net/6a06dqhc/3/), [sample 4](http://jsfiddle.net/606ksx2g/1/)\r\n\r\nOther examples:\r\n* [Sandbox](examples/sandbox.html)\r\n* [Sieve of Eratosthenes](examples/prime.html)\r\n* [World database](examples/console.html)\r\n* [Hundred of small tests](test)\r\n\r\n### What People Say about Alasql\r\n\r\n* [People around the world about Alasql](PEOPLE.md)\r\n\r\n## Presentations\r\n\r\n* [Alasql.js - fast JavaScript in-memory SQL database](http://www.slideshare.net/AndreyGershun/alasqljsfast-javascript-inmemory-sql-database) (English)\r\n\r\n## Installation\r\n\r\n### In browser\r\n\r\nInclude file: [alasql.js](./alasql.js) to the page.\r\n\r\n```html\r\n  <script src=\"alasql.js\"></script>  \r\n  <script>\r\n    alasql(\"CREATE TABLE test (language INT, hello STRING)\");\r\n    alasql(\"INSERT INTO test VALUES (1,'Hello!')\");\r\n    alasql(\"INSERT INTO test VALUES (2,'Aloha!')\");\r\n    alasql(\"INSERT INTO test VALUES (3,'Bonjour!')\");\r\n    console.table(alasql(\"SELECT * FROM test WHERE language > 1\"));\r\n  </script>\r\n\r\n```\r\nTry this sample in [Alasql console](http://alasql.org/console/alaconsole.html?CREATE TABLE test (language INT, hello STRING);INSERT INTO test VALUES (1,'Hello!');INSERT INTO test VALUES (2,'Aloha!');INSERT INTO test VALUES (3,'Bonjour!');SELECT * FROM test WHERE language > 1)\r\n\r\nYou can use alasql.js with define()/require() functions in browser as well, because it supports AMD and UMD:\r\n\r\n```js\r\n    require(['../../alasql.js'], function(alasql) {\r\n        var test1 = [{a:1,b:2,c:3},{a:4,b:5,c:6},{a:7,b:8,c:9}];\r\n        console.table(alasql('SELECT a, b*c AS bc FROM ? AS t',[test1]));\r\n    });\r\n```\r\nLike in this sample you do not need to CREATE TABLE and INSERTS if you do not need constraints functionality.\r\n\r\n### In Node.js\r\n\r\nUse the following command for installation:\r\n```\r\n    npm install alasql\r\n```\r\nThen require alasql.js file:\r\n\r\n```js\r\n    var alasql = require('alasql');\r\n\r\n    var db = new alasql.Database();\r\n    \r\n    db.exec(\"CREATE TABLE test (one INT, two INT)\");\r\n    db.tables.test.data = [   // You can mix SQL and JavaScript\r\n        {one:3,two:4},\r\n        {one:5,two:6},\r\n    ];\r\n    var res = db.exec(\"SELECT * FROM test ORDER BY two DESC\");\r\n    console.log(res[0].one);\r\n\r\n```\r\n\r\n### Supported SQL statements\r\n\r\n* SELECT fields FROM tableid1 JOIN tableid2 ON oncond WHERE cond GROUP BY v1,v2 HAVING cond ORDER BY a,b, LIMIT number OFFSET number\r\n* INSERT INTO table \\[ (field1, field2) \\] VALUES (value1, value2), (value3, value4), ...\r\n* INSERT INTO table SELECT subquery\r\n* UPDATE table SET field = value1, field = value2 WHERE condition \r\n* DELETE FROM table WHERE condition \r\n* CREATE TABLE \\[IF NOT EXISTS\\] table (columns type PRIMARY KEY, constraints)\r\n* ALTER TABLE\r\n* DROP TABLE \\[IF EXISTS\\] table\r\n* CREATE DATABASE, USE DATABASE, DROP DATABASE\r\n* SHOW DATABASES / SHOW TABLES / SHOW COLUMNS / SHOW CRETE TABLE\r\n\r\nTry all these statements in [Alasql console](http://alasql.org/console/alaconsole.html?help)\r\n\r\n#### SELECT statement\r\n\r\nNow Alasql.js supports following subset of SELECT syntax:\r\n\r\n* SELECT column1, column2 AS alias3, FUNCTION(field4+field5) AS alias6, SUM(expression7) AS alias8, *, table2.*\r\n* FROM table1, table2, (SELECT * FROM table3) alias\r\n* LEFT / RIGHT / INNER / OUTER / ANTI / SEMI / CROSS JOIN table2 ON condition / USING columns\r\n* WHERE condition\r\n* GROUP BY column1, column2, ROLLUP(a,b), CUBE(c,d,e), GROUPING SETS(g,h)\r\n* HAVING condition\r\n* ORDER BY column1, column2 DESC, \r\n* LIMIT number [OFFSET number]\r\n* UNION / UNION ALL select / INTERSECT / EXCEPT\r\n\r\n#### Operators\r\n\r\n* +, -, *, /, %, AND, OR, NOT, BETWEEN, NOT BETWEEN, EXISTS (Subquery), > ALL (subquery/array), > ANY/SOME (subquery / array), [NOT] IN (subquery / array), LIKE\r\n\r\n#### Aggregators\r\n\r\n* SUM()\r\n* COUNT() \r\n* MIN()\r\n* MAX()\r\n* FIRST()\r\n* LAST()\r\n* Sorry, AVG still does not work\r\n\r\n#### GROUP BY Grouping functions\r\n\r\n* ROLLUP()\r\n* CUBE()\r\n* GROUPING SETS()\r\n#### Functions\r\n\r\n* ABS(), IIF(), IFNULL(), INSTR(), LOWER(), UPPER(), LCASE(), UCASE(), LEN(), LENGTH()\r\n\r\n#### User-defined JavaScript functions\r\n\r\nYou can use all benefits of SQL and JavaScript togeather by defining user functions. Just add new functions to alasql.fn object:\r\n\r\n```js\r\n        alasql.fn.double = function(x){return x*2};        \r\n        alasql.fn.sum10 = function(x,y) { return x+y*10; }\r\n        db.exec('SELECT a, double(a) AS b, sum10(a,b) FROM test1');\r\n```\r\n\r\nUser-defined functions are related to current database. You can define different functions in different databases. \r\n\r\n### alasql\r\n\r\nalasql is a main variable of module. You can use it immediatly as default database\r\n\r\nIn browser:\r\n```html\r\n    <script src=\"alasql.js\"></script>\r\n    <script>\r\n        alasql('CREATE TABLE one (two INT)');\r\n    </script>\r\n```\r\nTry this sample in [Alasql console](http://alasql.org/console/alaconsole.html?CREATE TABLE one (two INT))\r\n\r\n\r\nor in Node.js:\r\n```js\r\n    var alasql = require('alasql');\r\n    alasql('CREATE TABLE one (two INT)');\r\n```\r\n\r\nAnother approach is to create new database:\r\n\r\n```js\r\n    var mybase = new alasql.Database();\r\n    mybase.exec('CREATE TABLE one (two INT)');\r\n```\r\nYou can give a name to database and then access it from alasql:\r\n```js\r\n    var mybase = new alasql.Database('mybase');\r\n    console.log(alasql.databases.mybase);\r\n```\r\n\r\nEach database can be used with the following methods:\r\n\r\n```js\r\n    var db = new alasql.Database() - create new alasql-database\r\n    var res = db.exec(\"SELECT * FROM one\") - executes SELECT query and returns array of objects \r\n```\r\n\r\nUsually, alasql.js works synchronously, but you can use callback.\r\n\r\n```js\r\n    db.exec('SELECT * FROM test', [], function(res){\r\n    \tconsole.log(res);\r\n    });\r\n```\r\n\r\nor you can use aexec() - promised version of exec (in this case you need to install [es6-promise](https://www.npmjs.org/package/es6-promise) module for Node.js) (this feature is experimental and may be removed in a future to reduce dependices):\r\n```js\r\n    db.aexec('SELECT * FROM test').then(function(res){\r\n        console.log(res);\r\n    });\r\n```\r\nYou can use compile statements:\r\n```js\r\n    var insert = db.compile('INSERT INTO one (1,2)');\r\n    insert();\r\n```\r\n\r\nYou can use parameters in compiled statements:\r\n\r\n```js\r\n    var insert1 = db.compile('INSERT INTO one (?,?)');\r\n    var insert2 = db.compile('INSERT INTO one ($a,$b)');\r\n    var insert3 = db.compile('INSERT INTO one (:a,:b)');\r\n\r\n    insert1([1,2]);\r\n    insert2({a:1,b:2});\r\n    insert3({a:3,b:4});\r\n\r\n    db.exec('INSERT INTO one (?,?)',[5,6]);\r\n\r\n```\r\nYou even can use param in FROM clause: \r\n\r\n```js\r\n        var years = [\r\n            {yearid: 2012}, {yearid: 2013},\r\n            {yearid: 2014}, {yearid: 2015},\r\n            {yearid: 2016},\r\n        ];\r\n\r\n        var res = alasql.queryArray('SELECT * FROM ? AS years ' +\r\n            'WHERE yearid > ?', [years,2014]);\r\n\r\n        // res == [2015,2016]\r\n```\r\nYou can use array of arrays to make a query. In this case use square brackets for column name,\r\nlike \\[1\\] or table\\[2\\] (remember, all arrays in JavaScript start with 0):\r\n```js\r\n        var data = [\r\n            [2014, 1, 1], [2015, 2, 1],\r\n            [2016, 3, 1], [2017, 4, 2],\r\n            [2018, 5, 3], [2019, 6, 3]\r\n        ];\r\n        var res = alasql('SELECT SUM([1]) FROM ? d WHERE [0]>2016', [data]);\r\n```\r\nUse alasql.queryArrayOfArrays() function to return array of arrays. In this case\r\nyou can specify array position of selected column with number or number in brackets:\r\n```js\r\n        var res = alasql.queryArrayOfArrays(\r\n            'SELECT [1] AS 0,[1]+[2] AS [1] FROM ? d WHERE [0]>2016', [data]);\r\n```\r\nThis feature can be used as filter for arrays. Compare:\r\n```js\r\n        // Same filter\r\n        var res1 = alasql.queryArrayOfArrays('SELECT * FROM ? a WHERE [0]>2016', [data]);\r\n        var res2 = data.filter(function(a){return a[0]>2016});\r\n\r\n        // Complex filter with aggregating, grouping and sorting\r\n        var res = alasql.queryArrayOfArrays(\r\n            'SELECT [2] AS 0, SUM([1]) AS 1 FROM ? a WHERE a[0]>? GROUP BY [0] ORDER BY [1]', \r\n            [data, 2016]);\r\n\r\n```\r\n\r\n### Lower and Upper Case\r\n\r\nBy default, Alasql is case-insensitive to all standard keywords (like SELECT) and standard functions (like ABS()). All database names, table names, column names, and user-defined functions are case sensitive. \r\n\r\nJavaScript is case-sensitive language, so use the same CaSe for Alasql and JavaScript data.\r\n\r\nNow you can use databases, tables, and columns with spaces inside square brackets:\r\n\r\n```sql\r\n    CREATE DATABASE [My Database];  -- BTW You can use comments in the SQL statements\r\n    USE [My Database];              /* or comments like this */   \r\n    CREATE TABLE [A.table] ([the-column] INT);\r\n    INSERT INTO [A.table] VALUES (1),(2);\r\n    SELECT [the-column] AS [AS] FROM [My Database];\r\n```\r\nTry this sample in [Alasql console](http://alasql.org/console/alaconsole.html?CREATE DATABASE [My Database];USE [My Database];CREATE TABLE [A.table] ([the-column] INT);INSERT INTO [A.table] VALUES (1),(2);SELECT [the-column] AS [AS] FROM [My Database])\r\n\r\n\r\n### Transactions\r\n\r\nThere is a limited support of transactions (with tx.rollback() and tx.commit() functions):\r\n\r\n```js\r\n    db = new alasql.Database(\"mydb\");\r\n    db.transaction(function(tx) {\r\n        tx.exec('SELECT COUNT(*) FROM students');\r\n        tx.rollback();\r\n    });     \r\n\r\n```\r\nWarning: Sorry, transactions now are temporary unavailable due some complexities with realization.\r\n\r\n### SQL to JavaScript parser and compiler\r\n\r\nYou can use Alasql to parse to AST and compile SQL statements:\r\n\r\n```js\r\n    // Parse to AST\r\n    var ast = alasql.parse(\"SELECT * FROM one\");\r\n    console.log(ast.toString()); // Print restored SQL statement\r\n\r\n    // Compile to JavaScript function with or without parameters\r\n    var statement = alasql.compile(\"SELECT * FROM one WHERE a > ? AND b < ?\");\r\n    statement([1,5]);\r\n```\r\n\r\nAlasql uses wonderful [Jison](jison.org) parser to produce AST-tree.\r\n\r\n\r\n### Performance\r\n\r\nAccording the preliminary performance tests alasql.js is faster than [sql.js]() in 5 to 10 times on more than 1000 records tables, and 2 to 3 times to [WebSQL]() on different queries. \r\n\r\nAlasql has four different optimization algorithm:\r\n* Caching of compiled queries\r\n* Joins: Preindexation of joined table\r\n* Joins: Prefiltering of WHERE expressions\r\n\r\nNow optimization algorithm has some limitations and therefore \"table1 JOIN table2 USING column1, column2\" is faster than \"table1 JOIN table2 ON table1.column1 = table2.column1 AND table1.column2 = table2.column2 \", but with one column it is ok.\r\n\r\nCompare it with Lodash and Underscore:\r\n* [Alasql vs. Lodash vs. Underscore](http://jsperf.com/alasql-vs-lodash-sort/3) \r\n\r\n### Limitations\r\n\r\nIt is Ok with select for 1000000 records or 2 join two tables by 10000 records in each. \r\n\r\n### Tests\r\n\r\nI use mocha for tests. Run mocha from command line:\r\n\r\n```\r\n    mocha\r\n```\r\nor run [test/main.html](test/main.html) in browser.\r\n\r\n\r\n### Known Bugs\r\n\r\n1. Dates comparing (sorting now is ok)\r\n2. Transactions \r\n3. ORDER BY clause on three or more UNIONS ( [See example in Alasql console](http://alasql.org/console/alaconsole.html?select 10 as a union all select 20 as a union all select 30 as a order by a desc) )\r\n4. AVG() does not work \r\n5. There are many of others. Please, [give me a chance](https://github.com/agershun/alasql/issues) to fix them. Thank you!\r\n  \r\n### Future Plans\r\n\r\nRead my [to do](TODO.md) page\r\n\r\n\r\n### Similar projects\r\n\r\n* [Similar projects](SIMILAR.md) (SQL database, MDX/OLAP on JavaScript)\r\n\r\n### Credits\r\n\r\nMany thanks to Andrew Kent for his SQL Parser and other people for useful tools, which make our work much easier.\r\n\r\n## License\r\n\r\n(c) 2014, Andrey Gershun (agershun@gmail.com), [MIT licence information](LICENSE)\r\n\r\n",
  "readmeFilename": "README.md",
  "gitHead": "30b8ee6c6a5eb1d4611b5df415b98bab1fec7987",
  "_id": "alasql@0.0.23",
  "_shasum": "ef2d9ac5d03f07f130a6229f650ee8f9a0d381be",
  "_from": "alasql@>=0.0.23 <0.0.24"
}
